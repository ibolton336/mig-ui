{
  "manifest": {
    "name": "seamless-immutable",
    "version": "7.1.4",
    "description": "Immutable data structures for JavaScript which are backwards-compatible with normal JS Arrays and Objects.",
    "main": "src/seamless-immutable.js",
    "browser": "seamless-immutable.development.js",
    "react-native": "src/seamless-immutable.js",
    "devDependencies": {
      "chai": "3.5.0",
      "coveralls": "2.11.8",
      "deep-equal": "1.0.1",
      "envify": "3.4.0",
      "grunt": "1.0.2",
      "grunt-contrib-uglify": "0.11.1",
      "grunt-mocha-test": "0.12.7",
      "istanbul": "0.4.2",
      "jscheck": "0.2.0",
      "jshint": "2.9.5",
      "lodash": "3.10.1",
      "mocha": "2.4.5",
      "mocha-istanbul": "0.2.0",
      "mocha-lcov-reporter": "1.2.0",
      "react": "^15.0.1",
      "zuul": "3.11.1"
    },
    "scripts": {
      "test": "grunt",
      "test-watch": "mocha --watch test/*.spec.js",
      "jshint": "jshint seamless-immutable.development.js",
      "coverage": "export ISTANBUL_REPORTERS=text-summary,html,lcov && rm -rf tmp/ && rm -rf html-report/ && istanbul instrument test/ -o tmp/ && mocha --reporter mocha-istanbul tmp/*.spec.js && echo Open html-report/index.html to view results as HTML.",
      "zuul-local": "zuul --local -- test/*.spec.js",
      "travis-test": "npm run jshint && npm test && npm run coveralls",
      "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/rtfeldman/seamless-immutable.git"
    },
    "keywords": [
      "immutable"
    ],
    "author": {
      "name": "Richard Feldman"
    },
    "license": "BSD-3-Clause",
    "bugs": {
      "url": "https://github.com/rtfeldman/seamless-immutable/issues"
    },
    "jshintConfig": {
      "newcap": false,
      "validthis": true,
      "proto": true
    },
    "homepage": "https://github.com/rtfeldman/seamless-immutable",
    "_registry": "npm",
    "_loc": "/Users/ibolton/Library/Caches/Yarn/v6/npm-seamless-immutable-7.1.4-integrity/node_modules/seamless-immutable/package.json",
    "readmeFilename": "README.md",
    "readme": "seamless-immutable\n==================\n\nImmutable JS data structures which are backwards-compatible with normal Arrays and Objects.\n\nUse them in `for` loops, pass them to functions expecting vanilla JavaScript data structures, etc.\n\n```javascript\nvar array = Immutable([\"totally\", \"immutable\", {hammer: \"Can’t Touch This\"}]);\n\narray[1] = \"I'm going to mutate you!\"\narray[1] // \"immutable\"\n\narray[2].hammer = \"hm, surely I can mutate this nested object...\"\narray[2].hammer // \"Can’t Touch This\"\n\nfor (var index in array) { console.log(array[index]); }\n// \"totally\"\n// \"immutable\"\n// { hammer: 'Can’t Touch This' }\n\nJSON.stringify(array) // '[\"totally\",\"immutable\",{\"hammer\":\"Can’t Touch This\"}]'\n```\n\nThis level of backwards compatibility requires [ECMAScript 5](http://kangax.github.io/compat-table/es5/) features like [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) and [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) to exist and work correctly, which limits the browsers that can use this library to the ones shown in the test results below. (tl;dr [IE9+](https://saucelabs.com/u/seamless-immutable))\n\n[![build status][1]][2] [![NPM version][3]][4] [![coverage status][5]][6]\n\n## Performance\n\nWhenever you deeply clone large nested objects, it should typically go much faster with `Immutable` data structures. This is because the library reuses the existing nested objects rather than instantiating new ones.\n\nIn the development build, objects are [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze). (Note that [Safari is relatively slow to iterate over frozen objects](http://jsperf.com/performance-frozen-object/20).) The development build also overrides unsupported methods (methods that ordinarily mutate the underlying data structure) to throw helpful exceptions.\n\nThe production (minified) build does neither of these, which significantly improves performance.\n\nWe generally recommend to use the \"development\" build that enforces immutability (and this is the default in Node.js). Only switch to the production build when you encounter performance problems. (See #50 for how to do that in Node or using a build tool - essentially do explicitely refer to the production build.)\n\n## Intentional Abstraction Leaks\n\nBy popular demand, functions, errors, dates, and [React](https://facebook.github.io/react/)\ncomponents are treated as immutable even though technically they can be mutated.\n(It turns out that trying to make these immutable leads to more bad things\nthan good.) If you call `Immutable()` on any of these, be forewarned: they will\nnot actually be immutable!\n\n## Add-ons\n\nseamless-immutable is tightly focused on the mechanics of turning existing JavaScript data structures into immutable variants.\nAdditional packages are available to build on this capability and enable additional programming models:\n\n|Library|Description|\n|--------|------------|\n|[Cursor](https://github.com/MartinSnyder/seamless-immutable-cursor)|Compact Cursor Library built on top of the excellent seamless-immutable. Cursors can be used to manage transitions and manipulations of immutable structures in an application.|\n|[Mergers](https://github.com/crudh/seamless-immutable-mergers)|A collection of mergers for use with seamless-immutable. Also includes documentation about custom mergers, with examples, for writing your own.|\n\n## API Overview\n\n`Immutable()` returns a backwards-compatible immutable representation of whatever you pass it, so feel free to pass it absolutely anything that can be serialized as JSON. (As is the case with JSON, objects containing circular references are not allowed. Functions are allowed, unlike in JSON, but they will not be touched.)\n\nSince numbers, strings, `undefined`, and `null` are all immutable to begin with, the only unusual things it returns are Immutable Arrays and Immutable Objects. These have the same [ES5 methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) you’re used to seeing on them, but with these important differences:\n\n1. All the methods that would normally mutate the data structures instead throw `ImmutableError`.\n2. All the methods that return a relevant value now return an immutable equivalent of that value.\n3. Attempting to reassign values to their elements (e.g. `foo[5] = bar`) will not work. Browsers other than Internet Explorer will throw a `TypeError` if [use strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) is enabled, and in all other cases it will fail silently.\n4. A few additional methods have been added for convenience.\n\nFor example:\n\n```javascript\nImmutable([3, 1, 4]).sort()\n// This will throw an ImmutableError, because sort() is a mutating method.\n\nImmutable([1, 2, 3]).concat([10, 9, 8]).sort()\n// This will also throw ImmutableError, because an Immutable Array's methods\n// (including concat()) are guaranteed to return other immutable values.\n\n[1, 2, 3].concat(Immutable([6, 5, 4])).sort()\n// This will succeed, and will yield a sorted mutable array containing\n// [1, 2, 3, 4, 5, 6], because a vanilla array's concat() method has\n// no knowledge of Immutable.\n\nvar obj = Immutable({all: \"your base\", are: {belong: \"to them\"}});\nImmutable.merge(obj, {are: {belong: \"to us\"}})\n// This will return the following:\n// Immutable({all: \"your base\", are: {belong: \"to us\"}})\n```\n\n## Static or instance syntax\n\nSeamless-immutable supports both static and instance syntaxes:\n\n```javascript\nvar Immutable = require(\"seamless-immutable\").static;\nvar obj = {};\n\nImmutable.setIn(obj, ['key'], data)\n```\n\n```javascript\nvar Immutable = require(\"seamless-immutable\");\nvar obj = {};\n\nobj.setIn(['key'], data)\n```\n\nAlthough the later is shorter and is the current default, it can lead to\ncollisions and some users may dislike polluting object properties when it comes\nto debugging. As such the first syntax is recommended, but both are supported.\n\n## Immutable.from\n\nIf your linter cringes with the use of `Immutable` without a preceding `new`\n(e.g. ESLint's [new-cap](http://eslint.org/docs/rules/new-cap) rule),\nuse `Immutable.from`:\n\n```javascript\nImmutable.from([1, 2, 3]);\n// is functionally the same as calling:\nImmutable([1, 2, 3])\n```\n\n## Immutable Array\n\nLike a regular Array, but immutable! You can construct these by passing\nan array to `Immutable()`:\n\n```javascript\nImmutable([1, 2, 3])\n// An immutable array containing 1, 2, and 3.\n```\n\nBeyond [the usual Array fare](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Accessor_methods), the following methods have been added.\n\n### flatMap\n\n```javascript\nvar array = Immutable([\"here\", \"we\", \"go\"]);\nImmutable.flatMap(array, function(str) {\n  return [str, str, str];\n});\n// returns Immutable([\"here\", \"here\", \"here\", \"we\", \"we\", \"we\", \"go\", \"go\", \"go\"])\n\nvar array = Immutable([\"drop the numbers!\", 3, 2, 1, 0, null, undefined]);\nImmutable.flatMap(array, function(value) {\n  if (typeof value === \"number\") {\n    return [];\n  } else {\n    return value;\n  }\n});\n// returns Immutable([\"drop the numbers!\", null, undefined])\n```\n\nEffectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, except that whenever the provided\niterator function returns an Array, that Array's elements are each added to the final result.\n\n### asObject\n\n```javascript\nvar array = Immutable([\"hey\", \"you\"]);\nImmutable.asObject(array, function(str) {\n  return [str, str.toUpperCase()];\n});\n// returns Immutable({hey: \"HEY\", you: \"YOU\"})\n```\n\nEffectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\nwill return an array of two elements - the first representing a key, the other\na value. Then returns an Immutable Object constructed of those keys and values.\n\nYou can also call `.asObject` without passing an iterator, in which case it will proceed assuming the Array\nis already organized as desired.\n\n### asMutable\n\n```javascript\nvar array = Immutable([\"hello\", \"world\"]);\nvar mutableArray = Immutable.asMutable(array);\n\nmutableArray.push(\"!!!\");\n\nmutableArray // [\"hello\", \"world\", \"!!!\"]\n```\n\nReturns a mutable copy of the array. For a deeply mutable copy, in which any instances of `Immutable` contained in nested data structures within the array have been converted back to mutable data structures, call `Immutable.asMutable(obj, {deep: true})` instead.\n\n### isImmutable\n```javascript\nvar array = Immutable([\"hello\", \"world\"]);\nvar mutableArray = [\"hello\", \"world\"];\n\nImmutable.isImmutable(array)\n// returns true\n\nImmutable.isImmutable(mutableArray)\n// returns false\n```\n\nReturns whether an object is immutable or not.\n\n## Immutable Object\n\nLike a regular Object, but immutable! You can construct these by passing an\nobject to `Immutable()`.\n\n```javascript\nImmutable({foo: \"bar\"})\n// An immutable object containing the key \"foo\" and the value \"bar\".\n```\n\nTo construct an Immutable Object with a custom prototype, simply specify the\nprototype in `options` (while useful for preserving prototypes, please note\nthat custom mutator methods will not work as the object will be immutable):\n\n```javascript\nfunction Square(length) { this.length = length };\nSquare.prototype.area = function() { return Math.pow(this.length, 2) };\n\nImmutable(new Square(2), {prototype: Square.prototype}).area();\n// An immutable object, with prototype Square,\n// containing the key \"length\" and method `area()` returning 4\n```\n\nBeyond [the usual Object fare](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Methods_of_Object_instances), the following methods have been added.\n\n### Stack overflow protection\n\nCurrently you can't construct Immutable from an object with circular references. To protect from ugly stack overflows, we provide a simple protection during development. We stop at a suspiciously deep stack level and [show an error message][deep].\n\nIf your objects are deep, but not circular, you can increase this level from default `64`. For example:\n\n```javascript\nImmutable(deepObject, null, 256);\n```\n\nThis check is not performed in the production build.\n\n[deep]: https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected\n\n### merge\n\n```javascript\nvar obj = Immutable({status: \"good\", hypothesis: \"plausible\", errors: 0});\nImmutable.merge(obj, {status: \"funky\", hypothesis: \"confirmed\"});\n// returns Immutable({status: \"funky\", hypothesis: \"confirmed\", errors: 0})\n\nvar obj = Immutable({status: \"bad\", errors: 37});\nImmutable.merge(obj, [\n  {status: \"funky\", errors: 1}, {status: \"groovy\", errors: 2}, {status: \"sweet\"}]);\n// returns Immutable({status: \"sweet\", errors: 2})\n// because passing an Array is shorthand for\n// invoking a separate merge for each object in turn.\n```\nReturns an Immutable Object containing the properties and values of both\nthis object and the provided object, prioritizing the provided object's\nvalues whenever the same key is present in both objects.\n\nMultiple objects can be provided in an Array in which case more `merge`\ninvocations will be performed using each provided object in turn.\n\nA third argument can be provided to configure the merge. It should be an object with any of the following fields:\n\n```javascript\n{\n  deep: true, // perform a deep merge\n  merger: yourCustomMerger // supply a custom merger\n}\n```\n\nYou can find examples and documentation about custom mergers [here](https://github.com/crudh/seamless-immutable-mergers).\n\n### replace\n\n```javascript\nvar obj1 = Immutable({a: {b: 'test'}, c: 'test'});\nvar obj2 = Immutable.replace(obj1, {a: {b: 'test'}}, {deep: true});\n// returns Immutable({a: {b: 'test'}});\nobj1 === obj2\n// returns false\nobj1.a === obj2.a\n// returns true because child .a objects were identical\n```\n\nReturns an Immutable Object containing the properties and values of the\nsecond object only. With deep merge, all child objects are checked for\nequality and the original immutable object is returned when possible.\n\nA second argument can be provided to perform a deep merge: `{deep: true}`.\n\n### set\n\n```javascript\nvar obj = Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"alive\"});\nImmutable.set(obj, \"status\", \"dead\");\n// returns Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"dead\"})\n```\n\nReturns an Immutable Object with a single property set to the provided value.\nBasically a more straightforward way of saying\n```javascript\nvar obj = Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"alive\"});\nImmutable.merge(obj, {status: \"dead\"});\n```\n(and more convenient with non-literal keys unless you have ES6 ```[computed_property_names]```).\n\nA second argument can be provided to perform a deep compare: `{deep: true}`.\n\n### setIn\n\nLike [set](#set), but accepts a nested path to the property.\n\n```javascript\nvar obj = Immutable({type: {main: \"parrot\", sub: \"Norwegian Blue\"}, status: \"alive\"});\nImmutable.setIn(obj, [\"type\", \"sub\"], \"Norwegian Ridgeback\");\n// returns Immutable({type: {main: \"parrot\", sub: \"Norwegian Ridgeback\"}, status: \"alive\"})\n```\n\nA second argument can be provided to perform a deep compare: `{deep: true}`.\n\n### getIn\n\nReturns the value at the given path. A default value can be provided as a second argument.\n\n```javascript\nvar obj = Immutable({type: {main: \"parrot\", subtype: \"Norwegian Blue\"}, status: \"alive\"});\nImmutable.getIn(obj, [\"type\", \"subtype\"]);\n// returns \"Norwegian Blue\"\nImmutable.getIn(obj, [\"type\", \"class\"], \"Aves\");\n// returns \"Aves\"\n```\n\n### update\n\nReturns an Immutable Object with a single property updated using the provided updater function.\n\n```javascript\nfunction inc (x) { return x + 1 }\nvar obj = Immutable({foo: 1});\nImmutable.update(obj, \"foo\", inc);\n// returns Immutable({foo: 2})\n```\n\nAll additional arguments will be passed to the updater function.\n\n```javascript\nfunction add (x, y) { return x + y }\nvar obj = Immutable({foo: 1});\nImmutable.update(obj, \"foo\", add, 10);\n// returns Immutable({foo: 11})\n```\n\n### updateIn\n\nLike [update](#update), but accepts a nested path to the property.\n\n```javascript\nfunction add (x, y) { return x + y }\nvar obj = Immutable({foo: {bar: 1}});\nImmutable.updateIn(obj, [\"foo\", \"bar\"], add, 10);\n// returns Immutable({foo: {bar: 11}})\n```\n\n### without\n\n```javascript\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, \"with\");\n// returns Immutable({the: \"forests\", will: \"echo\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, [\"will\", \"with\"]);\n// returns Immutable({the: \"forests\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, \"will\", \"with\");\n// returns Immutable({the: \"forests\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, (value, key) => key === \"the\" || value === \"echo\");\n// returns Immutable({with: \"laughter\"})\n```\n\nReturns an Immutable Object excluding the given keys or keys/values satisfying\nthe given predicate from the existing object.\n\nMultiple keys can be provided, either in an Array or as extra arguments.\n\n### asMutable\n\n```javascript\nvar obj = Immutable({when: \"the\", levee: \"breaks\"});\nvar mutableObject = Immutable.asMutable(obj);\n\nmutableObject.have = \"no place to go\";\n\nmutableObject // {when: \"the\", levee: \"breaks\", have: \"no place to go\"}\n```\n\nReturns a mutable copy of the object. For a deeply mutable copy, in which any instances of `Immutable` contained in nested data structures within the object have been converted back to mutable data structures, call `Immutable.asMutable(obj, {deep: true})` instead.\n\n### Releases\n\n#### 7.1.4\n\nFixed bug with custom mergers treating all non-truthy values as undefined ([#244](https://github.com/rtfeldman/seamless-immutable/issues/244)).\n\n#### 7.1.3\n\nTreat `Blob` instances as immutable. Use `Array.isArray` over `instanceof`.\n\n#### 7.1.2\n\nTreat `Error` instances as immutable.\n\n#### 7.1.1\n\nFix .npmignore\n\n#### 7.1.0\n\nAdd `getIn` and assumption that Promises are immutable.\n\n#### 7.0.0\n\nAdd `Immutable.static` as the preferred API. Default to development build in webpack.\n\n#### 6.3.0\n\nAdds optional deep compare for `.set`, `.setIn` and `.replace`\n\n#### 6.2.0\n\nAdds static alternatives to methods, e.g. `Immutable.setIn`\n\n#### 6.1.4\n\nFixes [bug with deep merge() on an array argument](https://github.com/rtfeldman/seamless-immutable/pull/140).\n\n#### 6.1.3\n\nFixes bug with setting a new object on an existing leaf array.\n\n#### 6.1.2\n\nFixes bug where on some systems arrays are treated as plain objects.\n\n#### 6.1.1\n\n`without` now handles numeric keys the same way as string keys.\n\n#### 6.1.0\n\nAlias `Immutable.from()` to `Immutable()` for linters.\n\n#### 6.0.1\n\nReact components are now considered immutable.\n\n#### 6.0.0\n\nAdd cycle detection.\n\n#### 5.2.0\n\nAdd `update` and `updateIn`.\n\n#### 5.1.1\n\n`Immutable(Object.create(null))` now works as expected.\n\n#### 5.1.0\n\nAdd predicate support to `without()`\n\n#### 5.0.1\n\nFix missing dev/prod builds for 5.0.0\n\n#### 5.0.0\n\nIn development build, freeze Dates and ban mutating methods. (Note: dev and prod builds were mistakenly\nnot generated for this, so to get this functionality in those builds, use 5.0.1)\n\n#### 4.1.1\n\nMake `setIn` more null safe.\n\n#### 4.1.0\n\nAdds `set` and `setIn`\n\n#### 4.0.1\n\nNow when you `require(\"seamless-immutable\")`, you get the development build by default.\n\n#### 4.0.0\n\n`main` now points to `src/seamless-immutable.js` so you can more easily build with `envify` yourself.\n\n#### 3.0.0\n\nAdd support for optional prototyping.\n\n#### 2.4.2\n\nCalling .asMutable({deep: true}) on an Immutable data structure with a nested Date no longer throws an exception.\n\n#### 2.4.1\n\nArrays with nonstandard prototypes no longer throw exceptions when passed to `Immutable`.\n\n#### 2.4.0\n\nCustom mergers now check for reference equality and abort early if there is no more work needed, allowing improved performance.\n\n#### 2.3.2\n\nFixes a bug where indices passed into iterators for flatMap and asObject were strings instead of numbers.\n\n#### 2.3.1\n\nFixes an IE and Firefox bug related to cloning Dates while preserving their prototypes.\n\n#### 2.3.0\n\nDates now retain their prototypes, the same way Arrays do.\n\n#### 2.2.0\n\nAdds a minified production build with no freezing or defensive unsupported methods, for a ~2x performance boost.\n\n#### 2.1.0\n\nAdds optional `merger` function to `#merge`.\n\n#### 2.0.2\n\nBugfix: `#merge` with `{deep: true}` no longer attempts (unsuccessfully) to deeply merge arrays as though they were regular objects.\n\n#### 2.0.1\n\nMinor documentation typo fix.\n\n#### 2.0.0\n\nBreaking API change: `#merge` now takes exactly one or exactly two arguments. The second is optional and allows specifying `deep: true`.\n\n#### 1.3.0\n\nDon't bother returning a new value from `#merge` if no changes would result.\n\n#### 1.2.0\n\nMake error message for invalid `#asObject` less fancy, resulting in a performance improvement.\n\n#### 1.1.0\n\nAdds `#asMutable`\n\n#### 1.0.0\n\nInitial stable release\n\n## Development\n\nRun `npm install -g grunt-cli`, `npm install` and then `grunt` to build and test it.\n\n[1]: https://travis-ci.org/rtfeldman/seamless-immutable.svg?branch=master\n[2]: https://travis-ci.org/rtfeldman/seamless-immutable\n[3]: https://badge.fury.io/js/seamless-immutable.svg\n[4]: https://badge.fury.io/js/seamless-immutable\n[5]: http://img.shields.io/coveralls/rtfeldman/seamless-immutable.svg\n[6]: https://coveralls.io/r/rtfeldman/seamless-immutable\n",
    "licenseText": "Copyright (c) 2016, Richard Feldman\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of seamless-immutable nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/seamless-immutable/-/seamless-immutable-7.1.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/seamless-immutable/-/seamless-immutable-7.1.4.tgz",
    "hash": "",
    "integrity": "sha512-XiUO1QP4ki4E2PHegiGAlu6r82o5A+6tRh7IkGGTVg/h+UoeX4nFBeCGPOhb4CYjvkqsfm/TUtvOMYC1xmV30A==",
    "registry": "npm",
    "packageName": "seamless-immutable",
    "cacheIntegrity": "sha512-XiUO1QP4ki4E2PHegiGAlu6r82o5A+6tRh7IkGGTVg/h+UoeX4nFBeCGPOhb4CYjvkqsfm/TUtvOMYC1xmV30A== sha1-bpU23vCD3cTeoCB9ci4OgNDzcvg="
  },
  "registry": "npm",
  "hash": "5e250ed503f8922e04d8f1de82218096eeabf36a3903eead461ec8906193560fe1f94a1e5f89c505e0863ce85be02623be4aac7e6fd352dbce3180b5c66577d0"
}