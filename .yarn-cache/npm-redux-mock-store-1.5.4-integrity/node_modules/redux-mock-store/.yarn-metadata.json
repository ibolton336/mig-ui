{
  "manifest": {
    "name": "redux-mock-store",
    "version": "1.5.4",
    "description": "A mock store for testing your redux async action creators and middleware",
    "main": "lib/index.js",
    "scripts": {
      "prepublish": "rimraf lib && babel src --out-dir lib",
      "lint": "standard src/*.js test/*.js",
      "pretest": "npm run lint",
      "test": "mocha --compilers js:babel-core/register --reporter spec test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/arnaudbenard/redux-mock-store.git"
    },
    "author": {
      "name": "Arnaud Benard",
      "email": "arnaudm.benard@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/arnaudbenard/redux-mock-store/issues"
    },
    "homepage": "https://github.com/arnaudbenard/redux-mock-store#readme",
    "devDependencies": {
      "babel-cli": "^6.11.4",
      "babel-core": "^6.13.2",
      "babel-preset-es2015": "^6.13.2",
      "expect": "^1.12.2",
      "mocha": "^2.3.3",
      "redux": "^3.0.4",
      "redux-thunk": "^2.0.1",
      "rimraf": "^2.4.3",
      "sinon": "^1.17.2",
      "standard": "^7.1.2"
    },
    "dependencies": {
      "lodash.isplainobject": "^4.0.6"
    },
    "_registry": "npm",
    "_loc": "/Users/ibolton/Library/Caches/Yarn/v6/npm-redux-mock-store-1.5.4-integrity/node_modules/redux-mock-store/package.json",
    "readmeFilename": "README.md",
    "readme": "# redux-mock-store [![Circle CI](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master.svg?style=svg)](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master)\n\n\n![npm](https://nodei.co/npm/redux-mock-store.png?downloads=true&downloadRank=true&stars=true)\n\nA mock store for testing Redux async action creators and middleware. The mock store will create an array of dispatched actions which serve as an action log for tests.\n\nPlease note that this library is designed to test the action-related logic, not the reducer-related one. In other words, it does not update the Redux store. If you want a complex test combining actions and reducers together, take a look at other libraries (e.g., [redux-actions-assertions](https://github.com/redux-things/redux-actions-assertions)). Refer to issue [#71](https://github.com/arnaudbenard/redux-mock-store/issues/71) for more details.\n\n## Install\n\n```bash\nnpm install redux-mock-store --save-dev\n```\n\nOr\n\n```bash\nyarn add redux-mock-store --dev\n```\n\n## Usage\n\n### Synchronous actions\n\nThe simplest usecase is for synchronous actions. In this example, we will test if the `addTodo` action returns the right payload. `redux-mock-store` saves all the dispatched actions inside the store instance. You can get all the actions by calling `store.getActions()`. Finally, you can use any assertion library to test the payload.\n\n```js\nimport configureStore from 'redux-mock-store' //ES6 modules\nconst { configureStore } = require('redux-mock-store') //CommonJS\n\nconst middlewares = []\nconst mockStore = configureStore(middlewares)\n\n// You would import the action from your codebase in a real scenario\nconst addTodo = () => ({ type: 'ADD_TODO' })\n\nit('should dispatch action', () => {\n\n  // Initialize mockstore with empty state\n  const initialState = {}\n  const store = mockStore(initialState)\n\n  // Dispatch the action\n  store.dispatch(addTodo())\n\n  // Test if your store dispatched the expected actions\n  const actions = store.getActions()\n  const expectedPayload = { type: 'ADD_TODO' }\n  expect(actions).toEqual([expectedPayload])\n})\n```\n\n### Asynchronous actions\n\nA common usecase for an asynchronous action is a HTTP request to a server. In order to test those types of actions, you will need to call `store.getActions()` at the end of the request.\n\n```js\nimport configureStore from 'redux-mock-store'\nimport thunk from 'redux-thunk'\n\nconst middlewares = [thunk] // add your middlewares like `redux-thunk`\nconst mockStore = configureStore(middlewares)\n\n// You would import the action from your codebase in a real scenario\nfunction success() {\n  return {\n    type: 'FETCH_DATA_SUCCESS'\n  }\n}\n\nfunction fetchData () {\n  return dispatch => {\n    return fetch('/users.json') // Some async action with promise\n      .then(() => dispatch(success()))\n  };\n}\n\nit('should execute fetch data', () => {\n  const store = mockStore({})\n\n  // Return the promise\n  return store.dispatch(fetchData())\n    .then(() => {\n      const actions = store.getActions()\n      expect(actions[0]).toEqual(success())\n    })\n})\n```\n\n### API\n\n```js\nconfigureStore(middlewares?: Array) => mockStore: Function\n```\nConfigure mock store by applying the middlewares.\n\n```js\nmockStore(getState?: Object,Function) => store: Function\n```\nReturns an instance of the configured mock store. If you want to reset your store after every test, you should call this function.\n\n```js\nstore.dispatch(action) => action\n```\nDispatches an action through the mock store. The action will be stored in an array inside the instance and executed.\n\n```js\nstore.getState() => state: Object\n```\nReturns the state of the mock store.\n\n```js\nstore.getActions() => actions: Array\n```\nReturns the actions of the mock store.\n\n```js\nstore.clearActions()\n```\nClears the stored actions.\n\n```js\nstore.subscribe(callback: Function) => unsubscribe: Function\n```\nSubscribe to the store.\n\n```js\nstore.replaceReducer(nextReducer: Function)\n```\nFollows the Redux API.\n\n### Old version (`< 1.x.x`)\n\nhttps://github.com/arnaudbenard/redux-mock-store/blob/v0.0.6/README.md\n\n## License\n\nThe MIT License",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Arnaud Benard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/redux-mock-store/-/redux-mock-store-1.5.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/redux-mock-store/-/redux-mock-store-1.5.4.tgz",
    "hash": "",
    "integrity": "sha512-xmcA0O/tjCLXhh9Fuiq6pMrJCwFRaouA8436zcikdIpYWWCjU76CRk+i2bHx8EeiSiMGnB85/lZdU3wIJVXHTA==",
    "registry": "npm",
    "packageName": "redux-mock-store",
    "cacheIntegrity": "sha512-xmcA0O/tjCLXhh9Fuiq6pMrJCwFRaouA8436zcikdIpYWWCjU76CRk+i2bHx8EeiSiMGnB85/lZdU3wIJVXHTA== sha1-kNAklf2Rjduqlrg672Jih8mrWHI="
  },
  "registry": "npm",
  "hash": "c66700d0efed8c22d7861f45ba2abaa4cac90b01516a8b80f38dfacdc8a4748a585960a353be82464fa2d9b1f1f047a24a23069c1f39fe565d537c082555c74c"
}