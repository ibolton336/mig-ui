{
  "manifest": {
    "name": "react-router-hash-link",
    "version": "2.4.3",
    "description": "Hash link scroll functionality for React Router v4/5",
    "main": "dist/react-router-hash-link.cjs.js",
    "module": "dist/react-router-hash-link.esm.js",
    "sideEffects": false,
    "scripts": {
      "build": "rollpkg build",
      "watch": "rollpkg watch",
      "prepublishOnly": "npm run build",
      "lintStaged": "lint-staged"
    },
    "files": [
      "dist"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/rafgraph/react-router-hash-link.git"
    },
    "keywords": [
      "react",
      "react-router",
      "link",
      "hash-link",
      "scroll"
    ],
    "author": {
      "name": "Rafael Pedicini",
      "email": "rafael@rafgraph.dev"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/rafgraph/react-router-hash-link/issues"
    },
    "peerDependencies": {
      "react": ">=15",
      "react-router-dom": ">=4"
    },
    "dependencies": {
      "prop-types": "^15.7.2"
    },
    "devDependencies": {
      "lint-staged": "^10.5.4",
      "pre-commit": "^1.2.2",
      "react": "file:../../Library/Caches/Yarn/v6/npm-react-router-hash-link-2.4.3-integrity/node_modules/react-router-hash-link/demo/node_modules/react",
      "react-router-dom": "file:../../Library/Caches/Yarn/v6/npm-react-router-hash-link-2.4.3-integrity/node_modules/react-router-hash-link/demo/node_modules/react-router-dom",
      "rollpkg": "^0.5.5",
      "typescript": "^4.2.4"
    },
    "pre-commit": "lintStaged",
    "lint-staged": {
      "(src/**/*|demo/src/**/*)": [
        "prettier --write --ignore-unknown"
      ]
    },
    "prettier": "rollpkg/configs/prettier.json",
    "_registry": "npm",
    "_loc": "/Users/ibolton/Library/Caches/Yarn/v6/npm-react-router-hash-link-2.4.3-integrity/node_modules/react-router-hash-link/package.json",
    "readmeFilename": "README.md",
    "readme": "# React Router Hash Link\n\n[![npm](https://img.shields.io/npm/dm/react-router-hash-link?label=npm)](https://www.npmjs.com/package/react-router-hash-link) [![npm bundle size (version)](https://img.shields.io/bundlephobia/minzip/react-router-hash-link?color=purple)](https://bundlephobia.com/result?p=react-router-hash-link)\n\nThis is a solution to [React Router's issue of not scrolling to `#hash-fragments`](https://github.com/reactjs/react-router/issues/394#issuecomment-220221604) when using the `<Link>` component to navigate.\n\nWhen you click on a link created with `react-router-hash-link` it will scroll to the element on the page with the `id` that matches the `#hash-fragment` in the link. This will also work for elements that are created after an asynchronous data load. Note that you must use React Router's `BrowserRouter` for this to work.\n\n---\n\n### [Live demo app for React Router Hash Link](https://react-router-hash-link.rafgraph.dev)\n\nCode is in the [`/demo`](/demo) folder, or open the [demo in CodeSandbox](https://githubbox.com/rafgraph/react-router-hash-link/tree/main/demo)\n\n---\n\n## Basics\n\n```shell\nnpm install --save react-router-hash-link\n```\n\n`react-router-dom` is a peer dependency.\n\n---\n\n### `<HashLink>`\n\n```js\nimport { HashLink } from 'react-router-hash-link';\n\n...\n\n// use it just like a RRv4/5 <Link>\n// the `to` prop can be a string or an object, see RRv4/5 api for details\n<HashLink to=\"/some/path#with-hash-fragment\">Link to Hash Fragment</HashLink>\n```\n\n---\n\n### `<NavHashLink>`\n\n```js\nimport { NavHashLink } from 'react-router-hash-link';\n\n...\n\n// use it just like a RRv4/5 <NavLink> (see RRv4/5 api for details)\n// it will be active only if both the path and hash fragment match\n<NavHashLink\n  to=\"/some/path#with-hash-fragment\"\n  activeClassName=\"selected\"\n  activeStyle={{ color: 'red' }}\n  // etc...\n>Link to Hash Fragment</NavHashLink>\n```\n\n---\n\n## Scrolling API\n\n### `smooth: boolean`\n\n- Smooth scroll to the element\n- React Router Hash Link uses the native Element method `element.scrollIntoView()` for scrolling, and when the `smooth` prop is present it will call it with the smooth option, `element.scrollIntoView({ behavior: 'smooth' })`\n- Note that not all browsers have implemented options for `scrollIntoView` - see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) and [Can I Use](https://caniuse.com/#feat=scrollintoview) - there is also a browser [polyfill for smooth scrolling](https://github.com/iamdustan/smoothscroll) which you can install separately so `smooth` will work in all browsers\n\n```js\nimport { HashLink } from 'react-router-hash-link';\n\n...\n\n<HashLink smooth to=\"/path#hash\">\n  Link to Hash Fragment\n</HashLink>;\n```\n\n---\n\n### `scroll: function`\n\n- Custom scroll function called with the element to scroll to, e.g. `const myScrollFn = element => {...}`\n- This allows you to do things like scroll with offset, use a specific smooth scrolling library, or pass in your own options to `scrollIntoView`\n\n```js\nimport { HashLink } from 'react-router-hash-link';\n\n...\n\n<HashLink\n  to=\"/path#hash\"\n  scroll={(el) => el.scrollIntoView({ behavior: 'auto', block: 'end' })}\n>\n  Link to Hash Fragment\n</HashLink>;\n```\n\n---\n\n### Scroll to top of page\n\n- To scroll to the top of the page set the hash fragment to `#` (empty) or `#top`\n- This is inline with the [HTML spec](https://html.spec.whatwg.org/multipage/browsing-the-web.html#target-element), also see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Linking_to_an_element_on_the_same_page)\n\n```js\nimport { HashLink } from 'react-router-hash-link';\n\n...\n\n<HashLink to=\"/path#top\">Link to Top of Page</HashLink>\n// or\n<HashLink to=\"#top\">Link to Top of Page</HashLink>\n```\n\n---\n\n### Scroll with offset\n\n- To scroll with offset use a custom scroll function, one way of doing this can be found [here](https://github.com/rafgraph/react-router-hash-link/issues/25#issuecomment-536688104)\n\n---\n\n### `elementId: string`\n\n- Scroll to the element with matching id\n- Used instead of providing a hash fragment as part of the `to` prop, if both are present then the `elementId` will override the `to` prop's hash fragment\n- Note that it is generally recommended to use the `to` prop's hash fragment instead of the `elementId`\n\n---\n\n## Custom `Link`\n\nThe exported components are wrapped versions of the `Link` and `NavLink` exports of react-router-dom. In some cases you may need to provide a custom `Link` implementation.\n\nFor example, the gatsby static site generator requires you to use its implementation of `Link`. You can wrap it with the `genericHashLink` function of this package.\n\n```jsx\nimport { genericHashLink } from 'react-router-hash-link';\nimport GatsbyLink from 'gatsby-link';\n\nconst MyHashLink = genericHashLink(GatsbyLink);\n\nconst MyComponent = () => (\n  <div>\n    The default wont work for you?\n    <MyHashLink to=\"/faq#how-to-use-custom-link\">No problem!</MyHashLink>\n  </div>\n);\n```\n\n---\n\n## Focus Management\n\n`react-router-hash-link` attempts to recreate the native browser focusing behavior as closely as possible.\n\nThe browser native behavior when clicking a hash link is:\n\n- If the target element is not focusable, then focus is _moved_ to the target element, but the target element is not focused.\n- If the target element is focusable (interactive elements and elements with a `tabindex`), then the target element is focused.\n\nTo recreate this `react-router-hash-link` does the following:\n\n- For non-focusable elements, it calls `element.focus()` followed by `element.blur()` (using a temporary `tabindex` to ensure that the element can be focused programmatically) so that focus _moves_ to the target element but does not remain on it or trigger any style changes.\n- For focusable elements, it calls `element.focus()` and leaves focus on the target element.\n\nNote that you may find it useful to leave focus on non-interactive elements (by adding a `tabindex` of `-1`) to augment the navigation action with a visual focus indicator.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Rafael Pedicini\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/react-router-hash-link/-/react-router-hash-link-2.4.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/react-router-hash-link/-/react-router-hash-link-2.4.3.tgz",
    "hash": "",
    "integrity": "sha512-NU7GWc265m92xh/aYD79Vr1W+zAIXDWp3L2YZOYP4rCqPnJ6LI6vh3+rKgkidtYijozHclaEQTAHaAaMWPVI4A==",
    "registry": "npm",
    "packageName": "react-router-hash-link",
    "cacheIntegrity": "sha512-NU7GWc265m92xh/aYD79Vr1W+zAIXDWp3L2YZOYP4rCqPnJ6LI6vh3+rKgkidtYijozHclaEQTAHaAaMWPVI4A== sha1-Vwgk1T1sNc6U1zpGyOmGc6Envwg="
  },
  "registry": "npm",
  "hash": "354ec659cdbae66f76c61fda603efd56bd56fb30085c35a9dcbd9864e60fe2b0aa3e727a2c8eaf877fab2a092276d6228e8cc772568441300768068c58f548e0"
}